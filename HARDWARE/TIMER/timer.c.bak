#include "timer.h"
#include "basic.h"
#include "gpio.h"

//extern u8 PubFlagSecond;
//u8 PubFlagSecond;
//void DisplayRefresh(void);
//通用定时器中断初始化
//这里时钟选择为APB1的2倍，而APB1为36M
//arr：自动重装值。
//psc：时钟预分频数
//这里使用的是定时器3!

/*
void Timerx_Init(u16 arr,u16 psc)
{
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE); //时钟使能

	TIM_TimeBaseStructure.TIM_Period = 200; //设置在下一个更新事件装入活动的自动重装载寄存器周期的值	 计数到200为20ms
	TIM_TimeBaseStructure.TIM_Prescaler =(7200-1); //设置用来作为TIMx时钟频率除数的预分频值  10Khz的计数频率  
	TIM_TimeBaseStructure.TIM_ClockDivision = 0; //设置时钟分割:TDTS = Tck_tim
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure); //根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位
 
	TIM_ITConfig(  //使能或者失能指定的TIM中断
		TIM3, //TIM2
		TIM_IT_Update  |  //TIM 中断源
		TIM_IT_Trigger,   //TIM 触发中断源 
		ENABLE  //使能
		);
	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;  //TIM3中断
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;  //先占优先级0级
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;  //从优先级3级
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IRQ通道被使能
	NVIC_Init(&NVIC_InitStructure);  //根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器

	TIM_Cmd(TIM3, ENABLE);  //使能TIMx外设
							 
}

void TIM3_IRQHandler(void)   //TIM3中断
{
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET) //检查指定的TIM中断发生与否:TIM 中断源 
	{
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update  );  //清除TIMx的中断待处理位:TIM 中断源 
		if(PubFlagSecond == 1)
        {
            
        }
	}
}
*/

/**
void Timerx_Init(u16 arr,u16 psc)
{
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE); //ê±?óê1?ü

	TIM_TimeBaseStructure.TIM_Period = 200; //éè???ú??ò????üD?ê??t×°è????ˉμ?×??ˉ??×°????′??÷?ü?úμ??μ	 ??êyμ?200?a20ms
	TIM_TimeBaseStructure.TIM_Prescaler =(7200-1); //éè??ó?à′×÷?aTIMxê±?ó?μ?ê3yêyμ??¤・??μ?μ  10Khzμ???êy?μ?ê  
	TIM_TimeBaseStructure.TIM_ClockDivision = 0; //éè??ê±?ó・???:TDTS = Tck_tim
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM?òé???êy?￡ê?
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure); //?ù?YTIM_TimeBaseInitStruct?D???¨μ?2?êy3?ê??ˉTIMxμ?ê±???ùêyμ￥??
 
	TIM_ITConfig(  //ê1?ü?ò??ê§?ü???¨μ?TIM?D??
		TIM3, //TIM2
		TIM_IT_Update  |  //TIM ?D???′
		TIM_IT_Trigger,   //TIM ′￥・￠?D???′ 
		ENABLE  //ê1?ü
		);
	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;  //TIM3?D??
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;  //?è??ó??è??0??
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;  //′óó??è??3??
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IRQí¨μà±?ê1?ü
	NVIC_Init(&NVIC_InitStructure);  //?ù?YNVIC_InitStruct?D???¨μ?2?êy3?ê??ˉíaéèNVIC??′??÷

	TIM_Cmd(TIM3, ENABLE);  //ê1?üTIMxíaéè
							 
}
**/
/******************************************************************************/
// Name:    void TIM2_IRQHandler(void)
// Para:    None
// Return:  None
/******************************************************************************/
/*
void TIM2_IRQHandler(void)   //TIM2?D??
{
	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) //?ì2é???¨μ?TIM?D??・￠éúó?・?:TIM ?D???′ 
	{
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update  );  //??3yTIMxμ??D??′y′|àí??:TIM ?D???′ 
		
	}
}
*/
/******************************************************************************/
// Name:    void TIM4_IRQHandler(void)
// Para:    None
// Return:  None
/******************************************************************************/
/*
void TIM4_IRQHandler(void)   //TIM3?D??
{
	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET) //?ì2é???¨μ?TIM?D??・￠éúó?・?:TIM ?D???′ 
	{
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update  );  //??3yTIMxμ??D??′y′|àí??:TIM ?D???′ 
		
	}
}
*/






